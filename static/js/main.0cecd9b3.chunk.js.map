{"version":3,"sources":["api/sureAPI.js","components/RatingIntake.js","components/QuoteOverview.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","data","a","axios","post","put","quote","quoteId","RatingIntake","props","useState","first_name","setFirstName","last_name","setLastName","address","setAddress","updateAddress","label","e","persist","prevState","copy","target","value","className","TextField","style","marginRight","marginBottom","width","onChange","variant","marginLeft","line_1","fullWidth","line_2","marginTop","city","margin","region","postal","Button","color","onClick","onSubmit","QuoteOverview","String","quoteData","rating_address","policy_holder","variable_selections","mutableQuote","setMutableQuote","handelSelect","type","selection","parseInt","NaN","updateQuote","then","res","renderDropdown","variable_options","Card","CardContent","Typography","title","description","CardActions","Select","name","values","id","map","i","MenuItem","useEffect","premium","App","setQuote","showQuoteOverview","setShowQuoteOverview","initialMount","useRef","current","quotePost","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0cecd9b3.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseURL = 'https://fed-challenge-api.sure.now.sh/api/v1/quotes'\nasync function quotePost(data) {\n    return axios.post(baseURL, data);\n}\n\nasync function updateQuote(data) {\n    return axios.put(baseURL+`/${data.quote.quoteId}`,data)\n}\n\nexport {quotePost, updateQuote}\n","import React,{useState} from 'react';\nimport {TextField, Button, Typography} from '@material-ui/core/';\nimport './RatingIntake.css'\n\n\nfunction RatingIntake(props) {\n    const [first_name, setFirstName] = useState('');\n    const [last_name, setLastName] = useState('');\n    const [address, setAddress] = useState({\n        \"line_1\": '',\n        \"line_2\": '',\n        \"city\": '',\n        \"region\": '',\n        \"postal\": '' \n    });\n\n    function updateAddress(label, e) {\n        e.persist();\n        setAddress( (prevState) => {\n            var copy = {...prevState};\n            copy[label] = e.target.value;\n\n            return copy;\n            }\n        )\n        \n    }\n\n\n    return (<div className=\"intake-form\">\n        {/* <Typography variant=\"subtitle1\" sytle={{margin: \"10px\"}}> Rating Information</Typography> */}\n        <div className=\"names\"> \n            <TextField label=\"First Name\" style={{ marginRight: \"10px\", marginBottom: \"10px\", width: \"290px\" }} value={first_name} onChange={(e)=> {setFirstName(e.target.value)}} variant=\"filled\" />\n            <TextField label=\"Last Name\" style={{ marginLeft: \"10px\", marginBottom: \"10px\", width: \"290px\" }} value={last_name} onChange={(e) => {setLastName(e.target.value)}} variant=\"filled\" />\n        </div>\n        <div className=\"address\">\n            <div className=\"line1\">\n                <TextField label=\"Address\" value={address.line_1} onChange={(e) => updateAddress(\"line_1\", e)} variant=\"filled\" fullWidth/>\n            </div>\n            <div className=\"line2\"></div>    \n                <TextField value={address.line_2} onChange={(e) => updateAddress(\"line_2\", e)} variant=\"filled\" fullWidth/>\n            </div>\n            <div className=\"line3\">\n                <TextField label=\"City\" style={{ marginRight: \"10px\", marginTop:\"10px\", width:\"230px\"}} value={address.city} onChange={(e) => updateAddress(\"city\", e)} variant=\"filled\" />\n                <TextField label=\"Region\" style={{ margin: \"0px 10px\", marginTop:\"10px\", width: \"100px\" }} value={address.region} onChange={(e) => updateAddress(\"region\", e)} variant=\"filled\" />\n                <TextField label=\"Postal Code\" style={{ marginLeft: \"10px\", marginTop:\"10px\", width: \"230px\"  }} value={address.postal} onChange={(e) => updateAddress(\"postal\", e)} variant=\"filled\" />\n            </div>\n            <Button fullWidth color=\"primary\" style={{ marginTop:\"10px\" }} onClick={() => props.onSubmit(first_name,last_name,address)} variant=\"contained\">Submit</Button>\n        </div>);\n}\n\nexport default RatingIntake;","import React,{useState, useEffect} from 'react';\nimport {updateQuote} from '../api/sureAPI';\nimport {Button, Box, Card, CardContent, CardActions, Typography, Select, MenuItem} from '@material-ui/core/';\nimport './QuoteOverview.css';\n\n\nfunction QuoteOverview(props) {\n    const [mutableQuote, setMutableQuote] = useState({\n        \"quoteId\": new String(props.quoteData.quote.quoteId),\n        \"rating_address\": {...props.quoteData.quote.rating_address},\n        \"policy_holder\": {...props.quoteData.quote.policy_holder},\n        \"variable_selections\": {...props.quoteData.quote.variable_selections} \n    });\n\n    useEffect( () => {\n    }, [props.quoteData]\n    );\n\n    function handelSelect(e, type) {\n        e.persist();\n        var selection = parseInt(e.target.value);\n        if (selection !== NaN) {\n            var copy = {...mutableQuote};\n            copy.variable_selections[type] = selection;\n            setMutableQuote(copy);\n            updateQuote({\"quote\": copy}).then(res => {\n                if (res !== null) {\n                    props.updateQuote(res.data);\n                }\n            })\n        }\n    }\n\n    function renderDropdown(type) {\n        if (props.quoteData.quote.variable_options[type] !== null) {\n            return (\n                <Card className=\"card\">\n                    <CardContent>\n                        <Typography variant=\"h5\" >\n                            {props.quoteData.quote.variable_options[type].title}\n                        </Typography>\n                        <Typography variant=\"body2\" >\n                            {props.quoteData.quote.variable_options[type].description}\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                    <Select className=\"select\"\n                        fullWidth\n                        name={props.quoteData.quote.variable_options[type].values} \n                        id={props.quoteData.quote.variable_options[type].values} \n                        onChange={(e) => handelSelect(e, type)} \n                        value={mutableQuote.variable_selections[type]}\n                        >\n                        {props.quoteData.quote.variable_options[type].values.map( (i) => <MenuItem value={i}>${i}</MenuItem>)}\n                        </Select>\n                    </CardActions>\n                </Card>\n            )\n        }\n        return <div> An error occurred</div>;\n    }\n\n    return (\n        <div className=\"display-quote\">\n            \n            <div className=\"drop-downs\">\n                {renderDropdown(\"asteroid_collision\")}\n                {renderDropdown(\"deductible\")}\n            </div>\n            <Card className=\"card\">\n                <CardContent> Premium : $ {props.quoteData.quote.premium} </CardContent>\n            </Card>\n        </div>\n    )\n}\n\nexport default QuoteOverview;","import React, {useState, useEffect, useRef} from 'react';\nimport {quotePost} from './api/sureAPI.js';\nimport RatingIntake from './components/RatingIntake';\nimport QuoteOverview from './components/QuoteOverview';\n\n\nfunction App() {\n  const [quote, setQuote] = useState({\"premium\" : 0, \"variable_options\" : [], \"variable_selections\" : {}});\n  const [showQuoteOverview, setShowQuoteOverview] = useState(false);\n  \n  const initialMount = useRef(false);\n\n  useEffect(() =>\n   {\n     if (initialMount.current) {\n      setShowQuoteOverview(true)\n    } else {\n      initialMount.current = true;\n   }},[quote]\n  );\n\n  function submit(first_name, last_name, address) {\n    var data = {\"first_name\": first_name, \"last_name\": last_name, \"address\": address}\n    quotePost(data).then(res => {\n        setQuote(res.data);\n      }\n    );\n  }\n  \n  return (\n    <div className=\"App\">\n      {(showQuoteOverview) ? <QuoteOverview quoteData={quote} updateQuote={setQuote}/> : <RatingIntake onSubmit={submit}/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}